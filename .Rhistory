# Title: Philly Court Watching Power Analysis
# Author: Walter Campbell
# Initial Date: 05/26/2025
# Last Edited Date: 05/26/2026
# Purpose: To produce a couple different estimates of power for the
# Philly Court Watching Study, 960000-1701-000-01240.
# Clear workspace
rm(list=ls())
# Install and load packages - More than I ended up using, but can't hurt to have all
packages <- c(
"arrow", "dataReporter", "data.table", "fs", "Hmisc", "here", "haven",
"janitor", "lubridate", "magrittr", "purrr", "readr", "skimr", "stringr",
"tidyr", "tidyselect", "labelled", "dplyr", "DescTools", "broom",
"janitor", "gmodels", "crosstable", "flextable", "pwr", "ggplot2", "SimEngine",
"tidyverse", "pwrss"
)
install_missing_packages <- function(packages) {
new_packages <- packages[!(packages %in% installed.packages()[, "Package"])]
if (length(new_packages)) install.packages(new_packages)
}
install_missing_packages(packages)
invisible(lapply(packages, library, character.only = TRUE))
## Classic power estimate ##
library(pwr)
#Varying Sample Size to Get MDES
#Set the power analysis parameters to obtain the MDEs for a test of two proportions
samplesize <- c(1620, 900)
power <- (0.80)
siglev <- (0.05)
alternative <- ("two.sided")
#Run the power analysis
mdes <- sapply(samplesize,
FUN = function(x) {
pwr.2p.test(n = x,
power = power, sig.level = siglev,
alternative = alternative)$h})
plot_df <- data.frame(samplesize, mdes)
library(ggplot2)
ggplot(plot_df, aes(x=samplesize,
y=mdes))+geom_point()+geom_line()
# Title: Philly Court Watching Power Analysis
# Author: Walter Campbell
# Initial Date: 05/26/2025
# Last Edited Date: 05/26/2026
# Purpose: To produce a couple different estimates of power for the
# Philly Court Watching Study, 960000-1701-000-01240.
# Clear workspace
rm(list=ls())
# Install and load packages - More than I ended up using, but can't hurt to have all
packages <- c(
"arrow", "dataReporter", "data.table", "fs", "Hmisc", "here", "haven",
"janitor", "lubridate", "magrittr", "purrr", "readr", "skimr", "stringr",
"tidyr", "tidyselect", "labelled", "dplyr", "DescTools", "broom",
"janitor", "gmodels", "crosstable", "flextable", "pwr", "ggplot2", "SimEngine",
"tidyverse", "pwrss", "effectsize"
)
install_missing_packages <- function(packages) {
new_packages <- packages[!(packages %in% installed.packages()[, "Package"])]
if (length(new_packages)) install.packages(new_packages)
}
install_missing_packages(packages)
invisible(lapply(packages, library, character.only = TRUE))
prop1 <- c(0.200, 0.330)
prop2 <- c(0.173, 0.303)
hs <-data.frame(prop1, prop2)
hs <- hs %>%
mutate(MDEs = ES.h(p1=prop1, p2=prop2))
hs
percents <- data.frame(ors, bases)
ors <- c(2.09, 0.897)
#Base rate for convictions for felonies and misdemeanors
bases <- c(0.40, 0.23)
percents <- data.frame(ors, bases)
percents <- percents %>%
mutate(arrs = oddsratio_to_arr(OR=ors, baserate=bases))
#Odds ratios from papers
ors <- c(2.09, 0.897)
#Base rate for convictions for felonies and misdemeanors
bases <- c(0.40, 0.23)
percents <- data.frame(ors, bases)
percents <- percents %>%
mutate(arrs = oddsratio_to_arr(OR=ors, p0=bases))
percents
percents <- data.frame(ors, bases, ors, bases)
View(percents)
ors <- c(2.09, 0.897, 2.09, 0.897)
#Base rate for convictions for felonies and misdemeanors
bases <- c(0.40, 0.23, 0.23, 0.40)
percents <- data.frame(ors, bases)
percents
percents <- percents %>%
mutate(arrs = oddsratio_to_arr(OR=ors, p0=bases))
percents
prop1 <- c(0.40, 0.23, 0.40, 0.23)
prop2 <- c(0.582, 0.384, 0.374, 0.212)
hs <-data.frame(prop1, prop2)
hs
hs <- hs %>%
mutate(MDEs = ES.h(p1=prop1, p2=prop2))
hs
## Classic power estimate ##
library(pwr)
#Varying Sample Size to Get MDES
#Set the power analysis parameters to obtain the MDEs for a test of two proportions
samplesize <- c(1620, 900)
power <- (0.80)
siglev <- (0.05)
alternative <- ("two.sided")
#Run the power analysis
mdes <- sapply(samplesize,
FUN = function(x) {
pwr.2p.test(n = x,
power = power, sig.level = siglev,
alternative = alternative)$h})
plot_df <- data.frame(samplesize, mdes)
library(ggplot2)
ggplot(plot_df, aes(x=samplesize,
y=mdes))+geom_point()+geom_line()
library(pwr)
#Varying Sample Size to Get MDES
#Set the power analysis parameters to obtain the MDEs for a test of two proportions
samplesize <- c(3240, 1800)
power <- (0.80)
siglev <- (0.05)
alternative <- ("two.sided")
#Run the power analysis
mdes <- sapply(samplesize,
FUN = function(x) {
pwr.2p.test(n = x,
power = power, sig.level = siglev,
alternative = alternative)$h})
plot_df <- data.frame(samplesize, mdes)
library(ggplot2)
ggplot(plot_df, aes(x=samplesize,
y=mdes))+geom_point()+geom_line()
## Classic power estimate ##
library(pwr)
#Varying Sample Size to Get MDES
#Set the power analysis parameters to obtain the MDEs for a test of two proportions
samplesize <- c(6000, 2000)
power <- (0.80)
siglev <- (0.05)
alternative <- ("two.sided")
#Run the power analysis
mdes <- sapply(samplesize,
FUN = function(x) {
pwr.2p.test(n = x,
power = power, sig.level = siglev,
alternative = alternative)$h})
plot_df <- data.frame(samplesize, mdes)
library(ggplot2)
ggplot(plot_df, aes(x=samplesize,
y=mdes))+geom_point()+geom_line()
samplesize <- c(20000, 10000)
power <- (0.80)
siglev <- (0.05)
alternative <- ("two.sided")
#Run the power analysis
mdes <- sapply(samplesize,
FUN = function(x) {
pwr.2p.test(n = x,
power = power, sig.level = siglev,
alternative = alternative)$h})
plot_df <- data.frame(samplesize, mdes)
library(ggplot2)
ggplot(plot_df, aes(x=samplesize,
y=mdes))+geom_point()+geom_line()
prop1 <- c(0.40, 0.23, 0.40, 0.23, 0.40, 0.23)
prop2 <- c(0.582, 0.384, 0.374, 0.212, 0.52. 0.35)
prop1 <- c(0.40, 0.23, 0.40, 0.23, 0.40, 0.23)
prop2 <- c(0.582, 0.384, 0.374, 0.212, 0.52, 0.35)
hs <-data.frame(prop1, prop2)
hs <- hs %>%
mutate(MDEs = ES.h(p1=prop1, p2=prop2))
hs
library(pwr)
#Varying Sample Size to Get MDES
#Set the power analysis parameters to obtain the MDEs for a test of two proportions
samplesize <- c(1620, 900)
power <- (0.80)
siglev <- (0.05)
alternative <- ("two.sided")
#Run the power analysis
mdes <- sapply(samplesize,
FUN = function(x) {
pwr.2p.test(n = x,
power = power, sig.level = siglev,
alternative = alternative)$h})
plot_df <- data.frame(samplesize, mdes)
library(ggplot2)
ggplot(plot_df, aes(x=samplesize,
y=mdes))+geom_point()+geom_line()
pwrss.z.logreg(p0 = 0.400, p1 = 0.52, r2.other.x = 0.33,
power = 0.80, alpha = 0.05,
dist = "normal")
pwrss.z.logreg(p0 = 0.400, p1 = 0.374, r2.other.x = 0.33,
power = 0.80, alpha = 0.05,
dist = "normal")
#For a 23% conviction rate and using th elowest percentage point change
pwrss.z.logreg(p0 = 0.230, p1 = 0.212, r2.other.x = 0.33,
power = 0.80, alpha = 0.05,
dist = "normal")
ors <- c(2.09, 0.861, 2.09, 0.861)
#Base rate for convictions for felonies and misdemeanors
bases <- c(0.40, 0.23, 0.23, 0.40)
percents <- data.frame(ors, bases)
percents <- percents %>%
mutate(arrs = oddsratio_to_arr(OR=ors, p0=bases))
percents
my_power_function <- function(baseline_prop, sample_size) {
#Store results here
sig_results <- c()
#Simulate data 1000 times
for (i in 1:1000) {
#Create the pre treatment group
treatment_pre <- data.frame(condition=rep(1, sample_size), time=rep(0, sample_size), recid=rbinom(n=sample_size, size=1, prob=baseline_prop))
#Create the post treatment group
treatment_post <- data.frame(condition=rep(1, sample_size), time=rep(1, sample_size), recid=rbinom(n=sample_size, size=1, prob=baseline_prop-0.025))
#Create the pre comparison group
comparison_pre <- data.frame(condition=rep(0, sample_size), time=rep(0, sample_size), recid=rbinom(n=sample_size, size=1, prob=baseline_prop))
#Create the post comparison group
comparison_post <- data.frame(condition=rep(0, sample_size), time=rep(1, sample_size), recid=rbinom(n=sample_size, size=1, prob=baseline_prop))
#Combine all conditions and time periods
sample <- rbind(treatment_pre, treatment_post, comparison_pre, comparison_post)
#Run a rudimentary model
mylogit <- glm(recid ~ condition + time + condition:time, data = sample, family = "binomial")
summary(mylogit)
#Store whether the impact of the legislation is significant at an 0.05 level
sig_results[i]  <- tidy(mylogit)$p.value[4] <= .05
}
#Store mean of significance
sig_results %>%
mean() %>%
return()
}
#Try different sample sizes for each condition
sample_sizes_to_try <- c(1620, 900)
#Store the findings for the low (20%) recidivism rate
power_levels_low <- c()
#Run for 40% conviction rate
for (i in 1:6) {
power_levels_low[i] <- my_power_function(0.40, sample_sizes_to_try[i])
}
power_results
#Create a function that will simulate data with different sizes and baseline proportions
my_power_function <- function(baseline_prop, sample_size) {
#Store results here
sig_results <- c()
#Simulate data 1000 times
for (i in 1:1000) {
#Create the pre treatment group
treatment_pre <- data.frame(condition=rep(1, sample_size), time=rep(0, sample_size), recid=rbinom(n=sample_size, size=1, prob=baseline_prop))
#Create the post treatment group
treatment_post <- data.frame(condition=rep(1, sample_size), time=rep(1, sample_size), recid=rbinom(n=sample_size, size=1, prob=baseline_prop-0.025))
#Create the pre comparison group
comparison_pre <- data.frame(condition=rep(0, sample_size), time=rep(0, sample_size), recid=rbinom(n=sample_size, size=1, prob=baseline_prop))
#Create the post comparison group
comparison_post <- data.frame(condition=rep(0, sample_size), time=rep(1, sample_size), recid=rbinom(n=sample_size, size=1, prob=baseline_prop))
#Combine all conditions and time periods
sample <- rbind(treatment_pre, treatment_post, comparison_pre, comparison_post)
#Run a rudimentary model
mylogit <- glm(recid ~ condition + time + condition:time, data = sample, family = "binomial")
summary(mylogit)
#Store whether the impact of the legislation is significant at an 0.05 level
sig_results[i]  <- tidy(mylogit)$p.value[4] <= .05
}
#Store mean of significance
sig_results %>%
mean() %>%
return()
}
#Try different sample sizes for each condition
sample_sizes_to_try <- c(1620, 900)
#Store the findings for the low (20%) recidivism rate
power_levels_low <- c()
#Run for 40% conviction rate
for (i in 1:6) {
power_levels_low[i] <- my_power_function(0.40, sample_sizes_to_try[i])
}
#Run for 40% conviction rate
for (i in 1:2) {
power_levels_low[i] <- my_power_function(0.40, sample_sizes_to_try[i])
}
power_levels_low
# Where do we cross 80%?
power_results <- tibble(sample = sample_sizes_to_try,
power = power_levels_low)
power_results
#Plot the results
ggplot(power_results,
aes(x = sample, y = power)) +
geom_line(color = 'red', linewidth = 1.5) +
#Add a horizontal line at 80%
geom_hline(aes(yintercept = .8), linetype = 'dashed') +
#Make it look nice
theme_minimal() +
scale_y_continuous(labels = scales::percent) +
labs(x = 'Sample Size', y = 'Power') +
ggtitle("40% Conviction")
#Try different sample sizes for each condition
sample_sizes_to_try <- c(1620, 3240, 4860, 6480)
#Store the findings for the low (20%) recidivism rate
power_levels_low <- c()
#Run for 40% conviction rate
for (i in 1:4) {
power_levels_low[i] <- my_power_function(0.40, sample_sizes_to_try[i])
}
power_levels_low
# Where do we cross 80%?
power_results <- tibble(sample = sample_sizes_to_try,
power = power_levels_low)
power_results
#Plot the results
ggplot(power_results,
aes(x = sample, y = power)) +
geom_line(color = 'red', linewidth = 1.5) +
#Add a horizontal line at 80%
geom_hline(aes(yintercept = .8), linetype = 'dashed') +
#Make it look nice
theme_minimal() +
scale_y_continuous(labels = scales::percent) +
labs(x = 'Sample Size', y = 'Power') +
ggtitle("40% Conviction")
